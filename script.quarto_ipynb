{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Pythong script file\"\n",
        "---"
      ],
      "id": "b30f3eef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import requests\n",
        "import json\n",
        "import pandas as pd\n",
        "from dotenv import load_dotenv\n",
        "\n",
        "load_dotenv()\n",
        "import os\n",
        "\n",
        "current_dir = os.getcwd()\n",
        "file_path = os.path.join(current_dir, \"all_data_report.json\")\n",
        "\n",
        "\n",
        "# BLS API Key obtained at https://www.bls.gov/developers/home.htm\n",
        "bls_key = os.environ.get(\"BLS_API_KEY\")\n",
        "\n",
        "\n",
        "class c_bls_data_api:\n",
        "  \"\"\"\n",
        "  Reference: https://www.bls.gov/developers/api_python.htm\n",
        "  \"\"\"\n",
        "  \n",
        "  def __init__(self, parameters):\n",
        "    self.data = self.get_report(parameters)\n",
        "    \n",
        "  def get_report(self, parameters):\n",
        "    headers = {\"Content-type:\" \"application/json\"}\n",
        "    response = requests.post(\n",
        "      \"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n",
        "      data = parameters,\n",
        "      headers = headers,\n",
        "    )\n",
        "    \n",
        "    if response.status_code != 200:\n",
        "      raise Exception(f\"API Error: {response.status_code}\")\n",
        "  \n",
        "  return response.json()\n",
        "\n",
        "table_ids = [\n",
        "      \"CUUR0000SA0\",\n",
        "    \"CUUR0000SA0L1E\",\n",
        "    \"CUUR0000SAF1\",\n",
        "    \"CUUR0000SA0E\",\n",
        "    \"CUUR0000SETB01\",\n",
        "    \"CUUR0000SAM\",\n",
        "    \"CUUR0000SEMC01\",\n",
        "    \"CUUR0000SEMD01\",\n",
        "    \"CUUR0000SEMF01\",\n",
        "    \"CUUR0000SAH1\",\n",
        "]\n",
        "\n",
        "id_to_label = {\n",
        "      \"CUUR0000SA0\": \"All groups CPI\",\n",
        "    \"CUUR0000SA0L1E\": \"All items less food and energy\",\n",
        "    \"CUUR0000SAF1\": \"Food\",\n",
        "    \"CUUR0000SA0E\": \"Energy\",\n",
        "    \"CUUR0000SETB01\": \"Gasoline\",\n",
        "    \"CUUR0000SAM\": \"Medical care\",\n",
        "    \"CUUR0000SEMC01\": \"Physicians' services\",\n",
        "    \"CUUR0000SEMD01\": \"Hospital services\",\n",
        "    \"CUUR0000SEMF01\": \"Prescription drugs\",\n",
        "    \"CUUR0000SAH1\": \"Shelter\",\n",
        "}\n",
        "\n",
        "all_data = {}\n",
        "\n",
        "print(\"Program started.\")\n",
        "\n",
        "for table_id in table_ids:\n",
        "  bls_key = os.environ.get(\"BLS_API_KEY\")\n",
        "  parameters = json.dumps(\n",
        "    {\n",
        "      \"registrationkey\": bls_key,\n",
        "      \"seriesid\": [table_id],\n",
        "      \"startyear\": \"2019\"\n",
        "      \"endyear\": \"2025\",\n",
        "      \"calculations\": \"true\",\n",
        "    }\n",
        "  )\n",
        "  \n",
        "  bls_data_object = c_bls_data_api(parameters)\n",
        "  \n",
        "  all_data[table_id] = bls_data_object.data\n",
        "  \n",
        "\n",
        "with open(file_path, \"w\") as f:\n",
        "  json.dump(all_data, f, indent=6)\n",
        "\n",
        "print(\"Program completed.\")\n",
        "\n",
        "with open(file_path, \"r\") as f:\n",
        "  data = json.load(f)\n",
        "\n",
        "print(\"Loaded JSON data\")\n",
        "\n",
        "dfs = []\n",
        "\n",
        "for key, series in data.items():\n",
        "  try:\n",
        "    series_data = series[\"Results\"][\"series\"][0][\"data\"]\n",
        "    df_temp = pd.DataFrame(series_data)\n",
        "    df_temp[\"Category\"] = key\n",
        "    dfs.append(df_temp)\n",
        "  except KeyError:\n",
        "    print(f\"Proper keys not found for: {key}\")\n",
        "\n",
        "df = pd.concat(dfs, ignore_index=True)\n",
        "\n",
        "df[\"Year-Month\"] = df[\"year\"] + \"-\" + df[\"period\"].str[1:]\n",
        "\n",
        "df[\"value\"] = pd.to_numeric(df[\"value\"], errors=\"coerce\")\n",
        "\n",
        "df[\"Category_Label\"] = df[\"Category\"].map(id_to_label)\n",
        "\n",
        "df[\"Year-Month\"] = df[\"year\"].astype(str) + \"-\" + df[\"periodName\"]\n",
        "\n",
        "df[\"Year-Month\"] = pd.to_datetime(df[\"Year-Month\"])\n",
        "\n",
        "january_2019_data = df[\n",
        "  (df[\"Year-Month\"].dt.year == 2019) & (df[\"Year-Month\"].dt.month == 1)\n",
        "]\n",
        "\n",
        "january_2019_values = dict(\n",
        "  zip(january_2019_data[\"Category_Label\"], january_2019_data[\"value\"])\n",
        ")\n",
        "\n",
        "df[\"Value_January_2019\"] = df[\"Category_Label\"].map(january_2019_values)\n",
        "df[\"Difference_from_January_2019\"] = df[\"value\"] - df[\"Value_January_2019\"]\n",
        "\n",
        "df[\"Percent_Change_from_January_2019\"] = 0\n",
        "\n",
        "for category_label in january_2019_values.keys():\n",
        "  df.loc[\n",
        "    df[\"Category_Label\"] == category_label, \"Percent_Change_from_January_2019\"\n",
        "  ] = (\n",
        "    df.loc(df[\"Category_Label\"] == category_label, \"Difference_from_January_2019\")\n",
        "    / january_2019_values[category_label]\n",
        "  ) * 100\n",
        "\n",
        "df = df.reset_index(drop=True)\n",
        "\n",
        "# Calculate change from previous month\n",
        "df = df.sort_values(by=\"Year-Month\")\n",
        "grouped = df.groupby(\"Category_Label\")\n",
        "df[\"Percent_Change_from_Previous_Month\"] = grouped[\"value\"].pct_ch\n",
        "df = df.reset_index(drop=True)"
      ],
      "id": "8df2fce0",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\matth\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}